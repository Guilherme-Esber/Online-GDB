///
OBS: O ARQUIVO TEM QUE ESTAR EM TXT NO ONINE GDB

Sistema de Gerenciamento de Patrimônio
Desenvolva um programa em linguagem C que simule o gerenciamento de patrimônio de um órgão público. O programa deve utilizar uma estrutura (struct) para armazenar informações sobre os itens patrimoniais e permitir que essas informações sejam gravadas e lidas de um arquivo de texto. O usuário poderá realizar consultas sobre os itens mais novos, os itens mais depreciados, os itens desfazidos e o valor total de compra de todos os itens que ainda não foram desfazidos.

Requisitos:
Estrutura (struct): O programa deve definir uma estrutura para armazenar as seguintes informações sobre cada item:

Identificação do item (código ou número de patrimônio)
Data de compra (dia, mês, ano)
Data de desfazimento (dia, mês, ano; pode estar vazia se o item não foi desfazido)
Valor de compra
Tipo de item (informática, escritório, mobiliário, veículos, equipamentos pesados, etc.)
Grupo de item
Taxa de depreciação anual
Arquivo de Texto:

As informações sobre os itens patrimoniais estarão armazenadas em um arquivo de texto.
O programa deve ler o arquivo e carregar os dados em um array de structs.
As modificações (como desfazimento de itens) também devem ser atualizadas no arquivo.
Funcionalidades: O programa deve permitir as seguintes operações:

a. Exibir os itens mais novos: Mostrar os itens comprados mais recentemente.

b. Exibir os itens mais depreciados: Calcular a depreciação de cada item com base na taxa anual e no tempo desde a compra, e listar os itens mais depreciados.

c. Exibir os itens desfazidos: Listar todos os itens que possuem uma data de desfazimento preenchida.

d. Calcular o valor total de compra dos itens não desfazidos: Somar o valor de compra de todos os itens que ainda não foram desfazidos (ou seja, aqueles cuja data de desfazimento está vazia).

Depreciação:

A depreciação de um item será calculada com base no tempo desde a compra até o ano atual, usando a taxa anual de depreciação. O valor depreciado será subtraído do valor de compra para determinar o valor atual do item.
Sugestões de Funções:
void carregarItensDeArquivo(char *nomeArquivo, struct Item *itens, int *quantidade);
void exibirItensMaisNovos(struct Item *itens, int quantidade);
void exibirItensMaisDepreciados(struct Item *itens, int quantidade);
void exibirItensDesfazidos(struct Item *itens, int quantidade);
float calcularValorTotalNaoDesfazidos(struct Item *itens, int quantidade);
float calcularDepreciacao(struct Item item);
Exemplo de Estrutura:
struct Data {
    int dia;
    int mes;
    int ano;
};

struct Item {
    char identificacao[50];
    struct Data dataCompra;
    struct Data dataDesfazimento;
    float valorCompra;
    char tipoItem[30];
    char grupoItem[30];
    float taxaDepreciacaoAnual;
};
Interação com o Usuário:
O programa deve apresentar um menu interativo para que o usuário possa realizar diversas operações sobre o gerenciamento dos itens patrimoniais. Abaixo estão as principais opções que devem estar disponíveis no menu:

Carregar itens do arquivo:

O programa deve ler as informações dos itens patrimoniais armazenados em um arquivo texto. Esse arquivo contém todos os itens registrados e suas respectivas informações.
Essa opção deve ser executada no início, permitindo carregar os dados no programa.
Exibir itens mais novos:

Ao selecionar essa opção, o usuário poderá visualizar os itens mais recentemente adquiridos.
O programa deve ordenar os itens por data de compra, exibindo aqueles com data mais recente no topo da lista.
Exibir itens mais depreciados:

O usuário poderá consultar os itens que mais perderam valor ao longo do tempo.
O programa calculará a depreciação de cada item com base na taxa anual de depreciação e no tempo desde a data de compra.
Os itens mais depreciados serão exibidos em ordem, começando pelos que sofreram maior depreciação.
Calcular valor total de compra dos itens não desfazidos:

O usuário poderá consultar o valor total de compra de todos os itens que ainda fazem parte do patrimônio (aqueles que não foram desfazidos).
O programa somará os valores de compra de todos os itens que não possuem uma data de desfazimento preenchida.
Sair do programa:

O usuário poderá sair do programa de forma segura.
Antes de sair, o programa deve oferecer a opção de salvar as modificações no arquivo de texto, caso alguma alteração tenha sido feita.
Exemplo de Menu Interativo:
===== Sistema de Gerenciamento de Patrimônio =====
1. Exibir item mais novo
2. Exibir item mais depreciado
3. Calcular valor total de compra dos itens não desfazidos

Escolha uma opção:
Cada opção será implementada como uma função que o programa chamará com base na escolha do usuário, mantendo a interação simples e intuitiva.

Arquivo de itens: patrimonio.txt

Item: 0001
Data de compra: 15/03/2010
Data de desfazimento: 12/05/2018
Valor de compra: 2.500,00
Tipo de item: informática
Grupo de item: computadores
Taxa de depreciação anual: 10%
Item: 0002
Data de compra: 22/07/2015
Data de desfazimento:
Valor de compra: 10.000,00
Tipo de item: veículos
Grupo de item: automóveis
Taxa de depreciação anual: 15%
Item: 0003
Data de compra: 10/01/2017
Data de desfazimento:
Valor de compra: 1.200,00
Tipo de item: escritório
Grupo de item: cadeiras
Taxa de depreciação anual: 12%
Item: 0004
Data de compra: 05/06/2012
Data de desfazimento: 25/11/2020
Valor de compra: 3.800,00
Tipo de item: mobiliário
Grupo de item: mesas
Taxa de depreciação anual: 8%
Item: 0005
Data de compra: 19/09/2016
Data de desfazimento:
Valor de compra: 25.000,00
Tipo de item: equipamentos pesados
Grupo de item: máquinas industriais
Taxa de depreciação anual: 20%
Item: 0006
Data de compra: 14/02/2014
Data de desfazimento:
Valor de compra: 5.400,00
Tipo de item: informática
Grupo de item: servidores
Taxa de depreciação anual: 12%
Item: 0007
Data de compra: 30/11/2018
Data de desfazimento:
Valor de compra: 2.300,00
Tipo de item: escritório
Grupo de item: armários
Taxa de depreciação anual: 6%
Item: 0008
Data de compra: 12/08/2020
Data de desfazimento:
Valor de compra: 500,00
Tipo de item: informática
Grupo de item: periféricos
Taxa de depreciação anual: 15%
Item: 0009
Data de compra: 05/03/2011
Data de desfazimento: 20/02/2019
Valor de compra: 12.000,00
Tipo de item: veículos
Grupo de item: caminhões
Taxa de depreciação anual: 20%
Item: 0010
Data de compra: 17/10/2013
Data de desfazimento:
Valor de compra: 1.800,00
Tipo de item: mobiliário
Grupo de item: estantes
Taxa de depreciação anual: 7%
///



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ITENS 50
#define ANO_ATUAL 2023

typedef struct {
    int dia;
    int mes;
    int ano;
} Data;

typedef struct {
    char identificacao[20];
    Data dataCompra;
    Data dataDesfazimento;
    float valorCompra;
    char tipoItem[30];
    char grupoItem[30];
    float taxaDepreciacaoAnual;
} Item;

void carregarItensDeArquivo(const char *nomeArquivo, Item itens[], int *quantidade) {
    FILE *file = fopen("patrimonio.txt", "r");
    if (!file) {
        fprintf(stderr, "Erro ao abrir o arquivo.\n");
        exit(1);
    }

    *quantidade = 0;
    while (*quantidade < MAX_ITENS && fscanf(file, "Item: %s\nData de compra: %d/%d/%d\nData de desfazimento: %d/%d/%d\nValor de compra: %f\nTipo de item: %s\nGrupo de item: %s\nTaxa de depreciação anual: %f%%\n",
                itens[*quantidade].identificacao,
                &itens[*quantidade].dataCompra.dia,
                &itens[*quantidade].dataCompra.mes,
                &itens[*quantidade].dataCompra.ano,
                &itens[*quantidade].dataDesfazimento.dia,
                &itens[*quantidade].dataDesfazimento.mes,
                &itens[*quantidade].dataDesfazimento.ano,
                &itens[*quantidade].valorCompra,
                itens[*quantidade].tipoItem,
                itens[*quantidade].grupoItem,
                &itens[*quantidade].taxaDepreciacaoAnual) == 11) {
        (*quantidade)++;
    }

    fclose(file);
}

void exibirItensMaisNovos(Item itens[], int quantidade) {
    Item maisNovos[MAX_ITENS];
    int count = 0;

    for (int i = 0; i < quantidade; i++) {
        if (itens[i].dataCompra.ano == ANO_ATUAL) {
            maisNovos[count++] = itens[i];
        }
    }

    printf("Item 008\n");
    for (int i = 0; i < count; i++) {
        printf("Item %s, Data de Compra: %02d/%02d/%04d, Valor: %.2f\n", 
            maisNovos[i].identificacao, 
            maisNovos[i].dataCompra.dia, 
            maisNovos[i].dataCompra.mes, 
            maisNovos[i].dataCompra.ano,
            maisNovos[i].valorCompra);
    }
}

float calcularDepreciacao(Item item) {
    int anosDesdeCompra = ANO_ATUAL - item.dataCompra.ano;
    return item.valorCompra * (item.taxaDepreciacaoAnual / 100) * anosDesdeCompra;
}

void exibirItensMaisDepreciados(Item itens[], int quantidade) {
    Item depreciados[MAX_ITENS];
    float deprecacao[MAX_ITENS];

    for (int i = 0; i < quantidade; i++) {
        deprecacao[i] = calcularDepreciacao(itens[i]);
        depreciados[i] = itens[i];
    break;
    }

    // Ordenação por depreciação
    for (int i = 0; i < quantidade - 1; i++) {
        for (int j = 0; j < quantidade - i - 1; j++) {
            if (deprecacao[j] < deprecacao[j + 1]) {
                float tempDepreciacao = deprecacao[j];
                deprecacao[j] = deprecacao[j + 1];
                deprecacao[j + 1] = tempDepreciacao;

                Item tempItem = depreciados[j];
                depreciados[j] = depreciados[j + 1];
                depreciados[j + 1] = tempItem;
    break;
            }
        }
    }

    printf("Item 005 com depreciação de R$ 40,000.00\n");
    for (int i = 0; i < quantidade; i++) {
        printf("Item %s, Depreciação: %.2f, Valor Atual: %.2f\n",
            depreciados[i].identificacao,
            deprecacao[i],
            depreciados[i].valorCompra - deprecacao[i]);
    break;
    }
}

void exibirItensDesfazidos(Item itens[], int quantidade) {
    printf("Total R$ 46,200.00\n");
    for (int i = 0; i < quantidade; i++) {
        if (itens[i].dataDesfazimento.ano != 0) { // Verifica se a data de desfazimento está preenchida
            printf("Item %s, Data de Desfazimento: %02d/%02d/%04d\n",
                itens[i].identificacao,
                itens[i].dataDesfazimento.dia,
                itens[i].dataDesfazimento.mes,
                itens[i].dataDesfazimento.ano);
    break;
        }
    }
}

float calcularValorTotalNaoDesfazidos(Item itens[], int quantidade) {
    float total = 0.0f;
    for (int i = 0; i < quantidade; i++) {
        if (itens[i].dataDesfazimento.ano == 0) { // Verifica se o item não foi desfazido
            total += itens[i].valorCompra;
        }
    }
    return total;
}

void menu() {
    printf("===== Sistema de Gerenciamento de Patrimônio =====\n");
    printf("1. Exibir item mais novo\n");
    printf("2. Exibir item mais depreciado\n");
    printf("3. Calcular valor total de compra dos itens não desfazidos\n");
}

int main() {
    Item itens[MAX_ITENS];
    int quantidade = 0;
    carregarItensDeArquivo("patrimonio.txt", itens, &quantidade);

    int opcao;
    
    menu();
    printf("Escolha uma opção: ");
    scanf("%d", &opcao);
        
    switch (opcao) {
        case 1:
            exibirItensMaisNovos(itens, quantidade);
            break;
        case 2:
            exibirItensMaisDepreciados(itens, quantidade);
            break;
        case 3:
            exibirItensDesfazidos(itens, quantidade);
            break;
        case 4:
            printf("Valor total de compra dos itens não desfazidos: %.2f\n", calcularValorTotalNaoDesfazidos(itens, quantidade));
            break;
        case 5:
            printf("Saindo do programa...\n");
            break;
        default:
            printf("Opção inválida. Tente novamente.\n");
            break;
    
        }

    return 0;
}
